type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  posts: [Post!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  user: User!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  text: String!
  user: User!
  post: Post!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  token: String!
  user: User!
}

input CreatePostInput {
  userId: Int!
  title: String!
  body: String!
}

input CreateCommentInput {
  userId: Int!
  postId: Int!
  text: String!
}

enum OrderByType {
  ASC
  DESC
}

input UpdateUserProfileInput {
  userId: ID!
  firstName: String!
  lastName: String!
  email: String!
}

input UpdatePasswordInput {
  userId: ID!
  oldPassword: String!
  newPassword: String!
}

type Query {
  users(limit: Int, offset: Int, order: OrderByType): [User!]!
  posts(limit: Int, offset: Int, order: OrderByType): [Post!]!
  comments(limit: Int, offset: Int, order: OrderByType): [Comment!]!
  getPostById(id: Int!): Post!
  getUserById(id: Int!): User!
  getPostsByUserId(UserId: Int!, order: OrderByType): [Post!]!
}

type Mutation {
  signUp(data: SignUpInput!): User!
  login(data: LoginInput!): LoginOutput!
  createPost(data: CreatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateUserProfile(data: UpdateUserProfileInput!): User!
  changePassword(data: UpdatePasswordInput!): User!
}
